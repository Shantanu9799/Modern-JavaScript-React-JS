-> Conditional rendering

Conditional rendering is one of the technique to render something based on some conditions.

It can be done by if..else statement and also done by boolean logic as well.

Our task is to render a ☑️ sign if the channel is verified or not.

While passing the props we can send a value which will decide that the ☑️ sign is going to render or not.

//**  using if..else statement
Video.js

import "./Video.css";  // importing css file
function Video({ source, title, channel = "Santu", views, time, verified = true }) { // de-structuring the object and used them as a variable
  let channelJSX;
  if(verified) {
    channelJSX = <div className="channelName">{channel} ☑️</div>  // we can store a html code in a js variable.. It's a property of JSX
  } else {
    channelJSX = <div className="channelName">{channel}</div>
  }
  return (
    <div className="container">
      <div className="pic">
        <img src={source} alt="Opps!!" />
      </div>
      <div className="title">{title}</div>
      {channelJSX}
      <div className="details">
        {views} views <span>.</span> {time} ago
      </div>
    </div>
  );
}

export default Video;
**//

//**  using ternary operator
Video.js

import "./Video.css";  // importing css file
function Video({ source, title, channel = "Santu", views, time, verified = true }) { // de-structuring the object and used them as a variable
  return (
    <div className="container">
      <div className="pic">
        <img src={source} alt="Opps!!" />
      </div>
      <div className="title">{title}</div>
      {verified ? <div className="channelName">{channel} ☑️</div> : channelJSX = <div className="channelName">{channel}</div>}
      <div className="details">
        {views} views <span>.</span> {time} ago
      </div>
    </div>
  );
}

export default Video;




//** another way to use the ternary operator

Video.js

import "./Video.css";  // importing css file
function Video({ source, title, channel = "Santu", views, time, verified = true }) { // de-structuring the object and used them as a variable
  return (
    <div className="container">
      <div className="pic">
        <img src={source} alt="Opps!!" />
      </div>
      <div className="title">{title}</div>
      <div className="channelName">{channel} {verified ? '☑️' : null}</div>
      <div className="details">
        {views} views <span>.</span> {time} ago
      </div>
    </div>
  );
}

export default Video;


**//

//** using boolean expression

Video.js

import "./Video.css";  // importing css file
function Video({ source, title, channel = "Santu", views, time, verified = true }) { // de-structuring the object and used them as a variable
  return (
    <div className="container">
      <div className="pic">
        <img src={source} alt="Opps!!" />
      </div>
      <div className="title">{title}</div>
      <div className="channelName">{channel} {verified && '☑️'}</div>  // if the verified is true then only the next statement will execute otherwise the statement will terminate from that point, the statement will no be executed at all
      <div className="details">
        {views} views <span>.</span> {time} ago
      </div>
    </div>
  );
}

export default Video;

**//




-> Mapping and iterate through all the data of a list

our task is to render all the data using map(). 

//**
Data.js 

let videos = [              // create a array of objects to store all the value and we can use them for mapping by importing the Data.js \\
  {
    source:
      "https://repository-images.githubusercontent.com/37153337/9d0a6780-394a-11eb-9fd1-6296a684b124",
    title: "React JS Tutorial",
    views: "100K",
    time: "1 year",
    verified: false,
  },
  {
    verified: true,
    source: "https://1000logos.net/wp-content/uploads/2020/09/Java-Logo.jpg",
    title: "JAVA Tutorial",
    views: "10M",
    time: "2 months",
  },
  {
    source:
      "https://www.freecodecamp.org/news/content/images/2021/07/mysql.png",
    title: "MySql Tutorial",
    views: "10K",
    time: "11 months",
    verified: false,
  },
];

export default videos;
**//

//**
App.js

import "./App.css";
import Video from "./component/Video";
import videos from "./data/data";              // importing the Data.js \\
function App() {
  return (
    <div className="App">
      {videos.map((videos) => (                // using .map() => () to iterate 
        <Video
          title={videos.title}
          views={videos.views}
          source={videos.source}
          time={videos.time}
          verified={videos.verified}
        ></Video>
      ))}
    </div>
  );
}

export default App;
**//

//**
Video.js

import "./Video.css";  // importing css file
function Video({ source, title, channel = "Santu", views, time, verified = true }) { // de-structuring the object and used them as a variable
  return (
    <div className="container">
      <div className="pic">
        <img src={source} alt="Opps!!" />
      </div>
      <div className="title">{title}</div>
      <div className="channelName">{channel} {verified && '☑️'}</div>
      <div className="details">
        {views} views <span>.</span> {time} ago
      </div>
    </div>
  );
}

export default Video;
**//


-> Events, Event Handeling

If we pass any function, we should pass the function defination, don't call the function on a event.. If you do it'll automatically running in the console..
Like

//**
PlauButton.js

import './PlayButton.css'
function PlayButton() {
    return (
        <button onClick={console.log('Play')}>Play</button>   // it'll print the Play twice, because console.log('Play') expression is already called, because js expression will be executed always. That's why we should pass the defination of the function. This is called Event Handeler Function \\
    )
}

export default PlayButton


//** passing the defination of the function

import './PlayButton.css'
function PlayButton() {
    return (
        <button onClick={()=> console.log('Play')}>Play</button>   // now the play will be printed when ever you click the button \\
    )
}

export default PlayButton

**//



//** most convincing way of doing that is, 

import './PlayButton.css'
function PlayButton() {
    function handelClick() {
        console.log("Play")
    }
    return (
        <button onClick={handelClick}>Play</button>  //by putting only the name we're simply defining the func, we're not actually calling the function. The func will call when you click on the function
    )
}

export default PlayButton

**//



//** but don't do this one 

import './PlayButton.css'
function PlayButton() {
    function handelClick() {
        console.log("Play")
    }
    return (
        <button onClick={handelClick()}>Play</button> // because when you put ()on a func it simply means you are calling the function. The same problem you've to face \\
    )
}

export default PlayButton

**//

**//

** Adding Functionality in two different buttons using props

//**
PlayButton.js

import './PlayButton.css'

function PlayButton({message, name}) {
    function handelClick() {
        console.log(message);
    }
    return (
        <button onClick={handelClick}>{name}</button>
    )
}

export default PlayButton

**//

//**
App.js

    <div style={{clear : "both"}}> 
        <PlayButton name='Play' message='Play - msg'></PlayButton>
        <PlayButton name='Pause' message='Pause - msg'></PlayButton>
      </div>
    </div>

**//

But we know that, we can pass the Name of the button inside the button tahg. Here we can put the button name inside the PlayButton tags.. So we don't need any name props.. Instead we need to pass the children props for passing the name

//**
PlayButton.js

import './PlayButton.css'

function PlayButton({message, children}) {
    function handelClick() {
        console.log(message);
    }
    return (
        <button onClick={handelClick}>{children}</button>
    )
}

export default PlayButton

**//

//**
App.js

import "./App.css";
import Video from "./component/Video";
import PlayButton from "./component/playButton";
import videos from "./data/data";
function App() {
  return (
    //also we can make a object of all the properties and directly put it like <Video {...obj} />.
    <div className="App">
      {videos.map(videos => 
        <Video
          title={videos.title}
          views={videos.views}
          source={videos.source}
          time={videos.time}
          verified={videos.verified}
        ></Video>
      )}

      <div style={{clear : "both"}}> 
        <PlayButton message='Play - msg'>Play</PlayButton>
        <PlayButton message='Pause - msg'>Pause</PlayButton>
      </div>
    </div>
  );
}

export default App;

**//


** Adding different Functionality in two different buttons

//**
PlayButton.js

import './PlayButton.css'

function PlayButton({message, children, onSmash}) {  // we can pass a function as a props, because func 
    function handelClick() {
        onSmash();
    }
    return (
        <button onClick={handelClick}>{children}</button>
    )
}

export default PlayButton

**//

//**
App.js

import "./App.css";
import Video from "./component/Video";
import PlayButton from "./component/playButton";
import videos from "./data/data";
function App() {
  return (
    //also we can make a object of all the properties and directly put it like <Video {...obj} />.
    <div className="App">
      {videos.map(videos => 
        <Video
          title={videos.title}
          views={videos.views}
          source={videos.source}
          time={videos.time}
          verified={videos.verified}
        ></Video>
      )}

      <div style={{clear : "both"}}> 
        <PlayButton message='Play - msg' onSmash = {()=> console.log("Play")}>Play</PlayButton>  // this onSamsh is a custom event.. 
        <PlayButton message='Pause - msg' onSmash = {()=> alert("Pause")}>Pause</PlayButton>
      </div>
    </div>
  );
}

export default App;

**//


** Adding different two Functionality in one buttons

//**
playButton.js

import './PlayButton.css'
function PlayButton({message, children, onPlay, onPause}) {
    let playingStatus = false;     // creating a variable to main the current value \\
    function handelClick() {
        if(playingStatus) onPause();  // if true then call the onPause() function \\
        else onPlay();      // else call the onPlay() function

        playingStatus = !playingStatus;       // if the value is true make it false and vice varsa \\
    }
    return (
        <button onClick={handelClick}>{children}</button>
    )
}

export default PlayButton

**//

//**
App.js

import "./App.css";
import Video from "./component/Video";
import PlayButton from "./component/playButton";
import videos from "./data/data";
function App() {
  return (
    //also we can make a object of all the properties and directly put it like <Video {...obj} />.
    <div className="App">
      {videos.map((videos) => (
        <Video
          title={videos.title}
          views={videos.views}
          source={videos.source}
          time={videos.time}
          verified={videos.verified}
        ></Video>
      ))}

      <div style={{ clear: "both" }}>
        <PlayButton
          message="Play - msg"
          onPlay={() => console.log("Play")}       // onPlay() function \\
          onPause={() => console.log("Pause")}     // onPause() function \\
        >
          Play
        </PlayButton>
      </div>
    </div>
  );
}

export default App;

**//

** To show button under every video we have to use the children props

//**
App.js

import "./App.css";
import Video from "./component/Video";
import PlayButton from "./component/playButton";
import videos from "./data/data";
function App() {
  return (
    //also we can make a object of all the properties and directly put it like <Video {...obj} />.
    <div className="App">
      {videos.map((videos) => (
        <Video
          title={videos.title}
          views={videos.views}
          source={videos.source}
          time={videos.time}
          verified={videos.verified}
        >                                     
          <PlayButton                                 // putting the PlauButton tag inside the video tag \\
            onPlay={() => console.log("Play")}
            onPause={() => console.log("Pause")}
          >
            Play
          </PlayButton>
        </Video>
      ))}
    </div>
  );
}

export default App;

**//

//**
Video.js

import "./Video.css";  // importing css file
function Video({ source, title, channel = "Santu", views, time, verified = true , children}) {  // we're passing the children props because of rendering the child which is the playButton \\
  return (
    <div className="container">
      <div className="pic">
        <img src={source} alt="Opps!!" />
      </div>
      <div className="title">{title}</div>
      <div className="channelName">{channel} {verified && '☑️'}</div>
      <div className="details">
        {views} views <span>.</span> {time} ago
      </div>
      <div>{children}</div>   // creating a div just for make it smoother \\
    </div>
  );
}

export default Video;

**//
check the console... the state of the different varibale is maintained well for different button ..


--> UseState Hook

//**
Counter.js

import { useState } from "react";    // importing the useState hook
function Counter() {
    const [number, setNumber] = useState(0);   // useState hook return an array. The number and the setNumber used for array destructuring. we put 0 because of the initial value of the number. \\
    function handelClick() {
        setNumber(number+1)  // increment the value of number ... setNumber keep the previous state. \\
        console.log(number);
    }
    return (
        <>
        <h3 style={{color: "#fff"}}>{number}</h3>
        <button onClick={handelClick}>Add</button>
        </>
        
    )
}

export default Counter;

**//

//** another way and most popular one
Counter.js

import { useState } from "react";
function Counter() {
    const [number, setNumber] = useState(0);
    function handelClick() {
        setNumber(number => number+1)   // updater function style to do the job \\
        console.log(number);
    }
    return (
        <>
        <h3 style={{color: "#fff"}}>{number}</h3>
        <button onClick={handelClick}>Add</button>
        </>
        
    )
}

export default Counter;

**//

//** change play pause button using useState hook
PlauButton.js

import { useState } from 'react';   // importing the useState hook \\
import './PlayButton.css'

function PlayButton({children, onPlay, onPause}) {
    const [playingStatus, setPlayingStatus] = useState(false);   // destructuring array for main
    function handelClick() {
        if(playingStatus) onPause();
        else onPlay();

        setPlayingStatus(!playingStatus);
    }
    return (
        <button onClick={handelClick}>{children} : {playingStatus ? '⏸️' : '⏯️'}</button>
    )
}

export default PlayButton;

**//